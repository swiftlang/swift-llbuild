// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tritium/core/ActionCache.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enum representing the supported action cache key types
public enum Tritium_Core_KeyType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case rule // = 0
  case task // = 1
  case action // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .rule
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .rule
    case 1: self = .task
    case 2: self = .action
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .rule: return 0
    case .task: return 1
    case .action: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Tritium_Core_KeyType] = [
    .rule,
    .task,
    .action,
  ]

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Tritium_Core_KeyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RULE"),
    1: .same(proto: "TASK"),
    2: .same(proto: "ACTION"),
  ]
}
